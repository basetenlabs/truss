{%- if model_cache_v1 %}
{%- include "cache.Dockerfile.jinja" %}
{%- endif %} {#- endif model_cache_v1 #}

{% extends "base.Dockerfile.jinja" %}

{% block base_image_patch %}
{# If user base image is supplied in config, apply build commands from truss base image #}
{% if config.base_image %}
    {%- if not config.docker_server %}
ENV PYTHONUNBUFFERED="True"
ENV DEBIAN_FRONTEND="noninteractive"

{# Install common dependencies #}
RUN apt update && \
    apt install -y bash \
                build-essential \
                git \
                curl \
                ca-certificates \
                software-properties-common \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

COPY ./{{ base_server_requirements_filename }} {{ base_server_requirements_filename }}
RUN pip install -r {{ base_server_requirements_filename }} --no-cache-dir && rm -rf /root/.cache/pip
    {%- endif %} {#- endif not config.docker_server #}

    {%- if config.live_reload and not config.docker_server %}
    {# Create symlink for inference server IF a user base image is supplied and live_reload is enabled. #}
    {# This links the base images primary python executable path to /usr/local/bin/python. #}
    {# This is specific to the user-provided base image scenario. #}
RUN readlink {{ config.base_image.python_executable_path }} &>/dev/null \
    && echo "WARNING: Overwriting existing link at /usr/local/bin/python"
RUN ln -sf {{ config.base_image.python_executable_path }} /usr/local/bin/python
    {%- endif %} {#- endif config.live_reload and not config.docker_server (for symlink) #}
{% endif %} {#- endif config.base_image #}

{% endblock %} {#- endblock base_image_patch #}

{% block install_requirements %}
    {%- if should_install_server_requirements %}
COPY ./{{ server_requirements_filename }} {{ server_requirements_filename }}
RUN pip install -r {{ server_requirements_filename }} --no-cache-dir && rm -rf /root/.cache/pip
    {%- endif %} {#- endif should_install_server_requirements #}
{{ super() }}
{% endblock %} {#- endblock install_requirements #}


{% block app_copy %}
{%- if model_cache_v1 %}
# Copy data before code for better caching
{%- include "copy_cache_files.Dockerfile.jinja" -%}
{%- endif %} {#- endif model_cache_v1 #}

{%- if external_data_files %}
{% for url, dst in external_data_files %}
RUN mkdir -p {{ dst.parent }}; curl -L "{{ url }}" -o {{ dst }}
{% endfor %} {#- endfor external_data_files #}
{%- endif %} {#- endif external_data_files #}

{%- if build_commands %}
{% for command in build_commands %}
RUN {% for secret,path in config.build.secret_to_path_mapping.items() %} --mount=type=secret,id={{ secret }},target={{ path }}{%- endfor %} {{ command }}
{% endfor %} {#- endfor build_commands #}
{%- endif %} {#- endif build_commands #}

{# Copy data before code for better caching #}
{%- if data_dir_exists %}
COPY ./{{ config.data_dir }} /app/data
{%- endif %} {#- endif data_dir_exists #}

{%- if model_cache_v2 %}
# v0.0.9, keep synced with server_requirements.txt
RUN curl -sSL --fail --retry 5 --retry-delay 2 -o /usr/local/bin/truss-transfer-cli https://github.com/basetenlabs/truss/releases/download/v0.9.78rc004/truss-transfer-cli-v0.9.78rc004-linux-x86_64-unknown-linux-musl
RUN chmod +x /usr/local/bin/truss-transfer-cli
RUN mkdir /bptr
COPY ./bptr-manifest /bptr/bptr-manifest
{%- endif %} {#- endif model_cache_v2 #}

{%- if not config.docker_server %}
COPY ./server /app
{%- endif %} {#- endif not config.docker_server #}

{%- if use_local_src %}
{# This path takes precedence over site-packages. #}
COPY ./truss_chains /app/truss_chains
COPY ./truss /app/truss
{%- endif %} {#- endif use_local_src #}

COPY ./config.yaml /app/config.yaml
    {%- if config.live_reload and not config.docker_server %}
COPY ./control /control
# Step 1: Ensure a usable python{{ control_python_version }} is available
RUN if python{{ control_python_version }} -c 'import venv; venv.EnvBuilder(with_pip=True).create("/tmp/__probe_env")' > /dev/null 2>&1; then \
      echo "Using system python{{ control_python_version }}"; \
      python{{ control_python_version }} -m pip install --upgrade pip virtualenv && \
      python{{ control_python_version }} -m virtualenv /control/.env; \
    else \
      echo "Installing Miniforge-based python{{ control_python_version }}..."; \
      curl -fsSL -o miniforge.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh && \
      bash miniforge.sh -b -p /opt/conda-control && \
      rm miniforge.sh && \
      /opt/conda-control/bin/conda create -y -p /opt/conda-control/envs/py{{ control_python_version }} python={{ control_python_version }} && \
      /opt/conda-control/envs/py{{ control_python_version }}/bin/pip install --upgrade pip virtualenv && \
      /opt/conda-control/bin/conda clean -afy && \
      rm -rf /opt/conda-control/pkgs && \
      /opt/conda-control/envs/py{{ control_python_version }}/bin/python -m virtualenv /control/.env; \
    fi

# Step 2: Install requirements into the freshly created venv
RUN /control/.env/bin/pip install -r /control/requirements.txt
    {%- endif %} {#- endif config.live_reload and not config.docker_server (for control server setup) #}
{%- if model_dir_exists %}
COPY ./{{ config.model_module_dir }} /app/model
{%- endif %} {#- endif model_dir_exists #}
{% endblock %} {#- endblock app_copy #}


{% block run %}
    {%- if config.docker_server %}
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        curl nginx python3-pip && \
        rm -rf /var/lib/apt/lists/*
COPY ./docker_server_requirements.txt /app/docker_server_requirements.txt
RUN pip install -r /app/docker_server_requirements.txt --no-cache-dir && rm -rf /root/.cache/pip
{% set proxy_config_path = "/etc/nginx/conf.d/proxy.conf" %}
{% set supervisor_config_path = "/etc/supervisor/supervisord.conf" %}
{% set supervisor_log_dir = "/var/log/supervisor" %}
{% set supervisor_server_url = "http://localhost:8080" %}
COPY ./proxy.conf {{ proxy_config_path }}
RUN mkdir -p {{ supervisor_log_dir }}
COPY supervisord.conf {{ supervisor_config_path }}
ENV SUPERVISOR_SERVER_URL="{{ supervisor_server_url }}"
ENV SERVER_START_CMD="supervisord -c {{ supervisor_config_path }}"
ENTRYPOINT ["supervisord", "-c", "{{ supervisor_config_path }}"]
    {%- elif config.live_reload %} {#- elif config.live_reload #}
ENV HASH_TRUSS="{{ truss_hash }}"
ENV CONTROL_SERVER_PORT="8080"
ENV INFERENCE_SERVER_PORT="8090"
ENV SERVER_START_CMD="/control/.env/bin/python /control/control/server.py"
ENTRYPOINT ["/control/.env/bin/python", "/control/control/server.py"]
    {%- else %} {#- else (default inference server) #}
ENV INFERENCE_SERVER_PORT="8080"
ENV SERVER_START_CMD="{{ (config.base_image.python_executable_path | default("python3", true)) ~ " /app/main.py" }}"
ENTRYPOINT ["{{ (config.base_image.python_executable_path | default("python3", true)) }}", "/app/main.py"]
    {%- endif %} {#- endif config.docker_server / live_reload #}
{% endblock %} {#- endblock run #}
