--- docs/chains/doc_gen/generated-reference.mdx	2024-11-07 16:51:32.687418306 -0800
+++ docs/chains/doc_gen/API-reference.mdx	2024-11-07 16:58:24.661786055 -0800
@@ -24,31 +24,28 @@
 dependency of another chainlet. The return value of `depends` is intended to be
 used as a default argument in a chainlet’s `__init__`-method.
 When deploying a chain remotely, a corresponding stub to the remote is injected in
-its place. In `run_local` mode an instance of a local chainlet is injected.
+its place. In [`run_local`](#truss-chains-run-local) mode an instance of a local chainlet is injected.

 Refer to [the docs](https://docs.baseten.co/chains/getting-started) and this
 [example chainlet](https://github.com/basetenlabs/truss/blob/main/truss-chains/truss_chains/example_chainlet.py)
 for more guidance on how make one chainlet depend on another chainlet.

-#### WARNING
+<Warning>
 Despite the type annotation, this does *not* immediately provide a
 chainlet instance. Only when deploying remotely or using `run_local` a
 chainlet instance is provided.
-
+</Warning>

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `chainlet_cls` | *Type[ChainletT]* | The chainlet class of the dependency. |
-| `retries` | *int* | The number of times to retry the remote chainlet in case of failures (e.g. due to transient network issues). |
-| `timeout_sec` | *int* | Timeout for the HTTP request to this chainlet. |
-
+| Name           | Type                                                     | Description                                                                                                  |
+|----------------|----------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|
+| `chainlet_cls` | *Type[[ChainletBase](#class-truss-chains-chainletbase)]* | The chainlet class of the dependency.                                                                        |
+| `retries`      | *int*                                                    | The number of times to retry the remote chainlet in case of failures (e.g. due to transient network issues). |
+| `timeout_sec`  | *int*                                                    | Timeout for the HTTP request to this chainlet.                                                               |
 * **Returns:**
   A “symbolic marker” to be used as a default argument in a chainlet’s
   initializer.
-* **Return type:**
-  *ChainletT*

 ### `truss_chains.depends_context`

@@ -58,16 +55,15 @@
 [example chainlet](https://github.com/basetenlabs/truss/blob/main/truss-chains/truss_chains/example_chainlet.py)
 for more guidance on the `__init__`-signature of chainlets.

-#### WARNING
+<Warning>
 Despite the type annotation, this does *not* immediately provide a
 context instance. Only when deploying remotely or using `run_local` a
 context instance is provided.
+</Warning>

 * **Returns:**
   A “symbolic marker” to be used as a default argument in a chainlet’s
   initializer.
-* **Return type:**
-  [*DeploymentContext*](#truss_chains.DeploymentContext)

 ### *class* `truss_chains.DeploymentContext`

@@ -82,19 +78,12 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `data_dir` | *Path\|None* | The directory where the chainlet can store and access data, e.g. for downloading model weights. |
-| `user_config` | ** | User-defined configuration for the chainlet. |
-| `chainlet_to_service` | *Mapping[str,[ServiceDescriptor](#truss_chains.ServiceDescriptor* | A mapping from chainlet names to service descriptors. This is used create RPCs sessions to dependency chainlets. It contains only the chainlet services that are dependencies of the current chainlet. |
-| `secrets` | *MappingNoIter[str,str]* | A mapping from secret names to secret values. It contains only the secrets that are listed in `remote_config.assets.secret_keys` of the current chainlet. |
-| `environment` | *[Environment](#truss_chains.definitions.Environment* | The environment that the chainlet is deployed in. None if the chainlet is not associated with an environment. |
-
-#### chainlet_to_service *: Mapping[str, [ServiceDescriptor](#truss_chains.ServiceDescriptor)]*
-
-#### data_dir *: Path | None*
-
-#### environment *: [Environment](#truss_chains.definitions.Environment) | None*
+| Name                  | Type                                                                      | Description                                                                                                                                                                                            |
+|-----------------------|---------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `data_dir`            | *Path\|None*                                                              | The directory where the chainlet can store and access data, e.g. for downloading model weights.                                                                                                        |
+| `chainlet_to_service` | *Mapping[str,[ServiceDescriptor](#class-truss-chains-servicedescriptor)]* | A mapping from chainlet names to service descriptors. This is used create RPCs sessions to dependency chainlets. It contains only the chainlet services that are dependencies of the current chainlet. |
+| `secrets`             | *Mapping[str,str]*                                                        | A mapping from secret names to secret values. It contains only the secrets that are listed in `remote_config.assets.secret_keys` of the current chainlet.                                              |
+| `environment`         | *[Environment](#class-truss-chains-definitions-environment)\|None*        | The environment that the chainlet is deployed in. None if the chainlet is not associated with an environment.                                                                                          |

 #### get_baseten_api_key()

@@ -103,12 +92,14 @@

 #### get_service_descriptor(chainlet_name)

-* **Parameters:**
-  **chainlet_name** (*str*)
-* **Return type:**
-  [*ServiceDescriptor*](#truss_chains.ServiceDescriptor)
+**Parameters:**

-#### secrets *: MappingNoIter[str, str]*
+| Name            | Type  | Description               |
+|-----------------|-------|---------------------------|
+| `chainlet_name` | *str* | The name of the chainlet. |
+
+* **Return type:**
+  [*ServiceDescriptor*](#class-truss-chains-servicedescriptor)

 ### *class* `truss_chains.definitions.Environment`

@@ -118,7 +109,6 @@

 * **Parameters:**
   **name** (*str*) – The name of the environment.
-#### name *: str*

 ### *class* `truss_chains.ChainletOptions`

@@ -127,14 +117,10 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `enable_b10_tracing` | *bool* | enables baseten-internal trace data collection. This helps baseten engineers better analyze chain performance in case of issues. It is independent of a potentially user-configured tracing instrumentation. Turning this on, could add performance overhead. |
-| `env_variables` | *Mapping[str,str]* | static environment variables available to the deployed chainlet. |
-
-#### enable_b10_tracing *: bool*
-
-#### env_variables *: Mapping[str, str]*
+| Name                   | Type               | Description                                                                                                                                                                                                                                                   |
+|------------------------|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `enable_b10_tracing`   | *bool*             | enables baseten-internal trace data collection. This helps baseten engineers better analyze chain performance in case of issues. It is independent of a potentially user-configured tracing instrumentation. Turning this on, could add performance overhead. |
+| `env_variables`        | *Mapping[str,str]* | static environment variables available to the deployed chainlet.                                                                                                                                                                                              |

 ### *class* `truss_chains.RPCOptions`

@@ -144,15 +130,10 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `timeout_sec` | *int* |  |
-| `retries` | *int* |  |
-
-
-#### retries *: int*
-
-#### timeout_sec *: int*
+| Name          | Type  | Description |
+|---------------|-------|-------------|
+| `timeout_sec` | *int* |             |
+| `retries`     | *int* |             |

 ### `truss_chains.mark_entrypoint`

@@ -164,18 +145,23 @@

 Example usage:

-```default
+```python
 import truss_chains as chains

+
 @chains.mark_entrypoint
 class MyChainlet(ChainletBase):
     ...
 ```

-* **Parameters:**
-  **cls** (*Type* *[**ChainletT* *]*)
+**Parameters:**
+
+| Name  | Type                                                     | Description         |
+|-------|----------------------------------------------------------|---------------------|
+| `cls` | *Type[[ChainletBase](#class-truss-chains-chainletbase)]* | The chainlet class. |
+
 * **Return type:**
-  *Type*[*ChainletT*]
+  *Type*[*ChainletBase*]

 # Remote Configuration

@@ -189,7 +175,7 @@

 This is specified as a class variable for each chainlet class, e.g.:

-```default
+```python
 import truss_chains as chains


@@ -205,34 +191,13 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `docker_image` | *[DockerImage](#truss_chains.DockerImage* |  |
-| `compute` | *[Compute](#truss_chains.Compute* |  |
-| `assets` | *[Assets](#truss_chains.Assets* |  |
-| `name` | *str\|None* |  |
-| `options` | *[ChainletOptions](#truss_chains.ChainletOptions* |  |
-
-
-#### assets *: [Assets](#truss_chains.Assets)*
-
-#### compute *: [Compute](#truss_chains.Compute)*
-
-#### docker_image *: [DockerImage](#truss_chains.DockerImage)*
-
-#### get_asset_spec()
-
-* **Return type:**
-  *AssetSpec*
-
-#### get_compute_spec()
-
-* **Return type:**
-  *ComputeSpec*
-
-#### name *: str | None*
-
-#### options *: [ChainletOptions](#truss_chains.ChainletOptions)*
+| Name           | Type                                                     | Description |
+|----------------|----------------------------------------------------------|-------------|
+| `docker_image` | *[DockerImage](#class-truss-chains-dockerimage)*         |             |
+| `compute`      | *[Compute](#class-truss-chains-compute)*                 |             |
+| `assets`       | *[Assets](#class-truss-chains-assets)*                   |             |
+| `name`         | *str\|None*                                              |             |
+| `options`      | *[ChainletOptions](#class-truss-chains-chainletoptions)* |             |

 ### *class* `truss_chains.DockerImage`

@@ -240,35 +205,23 @@

 Configures the docker image in which a remoted chainlet is deployed.

-#### NOTE
+<Note>
 Any paths are relative to the source file where `DockerImage` is
-defined and must be created with the helper function `make_abs_path_here`.
+defined and must be created with the helper function [`make_abs_path_here`](#truss-chains-make-abs-path-here).
 This allows you for example organize chainlets in different (potentially nested)
 modules and keep their requirement files right next their python source files.
-
+</Note>

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `base_image` | *[BasetenImage](#truss_chains.BasetenImage* | The base image used by the chainlet. Other dependencies and assets are included as additional layers on top of that image. You can choose a Baseten default image for a supported python version (e.g. `BasetenImage.PY311`), this will also include GPU drivers if needed, or provide a custom image (e.g. `CustomImage(image="python:3.11-slim")`).. |
-| `pip_requirements_file` | *AbsPath\|None* | Path to a file containing pip requirements. The file content is naively concatenated with `pip_requirements`. |
-| `pip_requirements` | *list[str]* | A list of pip requirements to install.  The items are naively concatenated with the content of the `pip_requirements_file`. |
-| `apt_requirements` | *list[str]* | A list of apt requirements to install. |
-| `data_dir` | *AbsPath\|None* | Data from this directory is copied into the docker image and accessible to the remote chainlet at runtime. |
-| `external_package_dirs` | *list[AbsPath]\|None* | A list of directories containing additional python packages outside the chain’s workspace dir, e.g. a shared library. This code is copied into the docker image and importable at runtime. |
-
-#### apt_requirements *: list[str]*
-
-#### base_image *: [BasetenImage](#truss_chains.BasetenImage) | [CustomImage](#truss_chains.CustomImage)*
-
-#### data_dir *: AbsPath | None*
-
-#### external_package_dirs *: list[AbsPath] | None*
-
-#### pip_requirements *: list[str]*
-
-#### pip_requirements_file *: AbsPath | None*
+| Name                    | Type                                                                                         | Description                                                                                                                                                                                                                                                                                                                                            |
+|-------------------------|----------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `base_image`            | *[BasetenImage](#truss-chains-basetenimage)\|[CustomImage](#truss-chains-customimage)*       | The base image used by the chainlet. Other dependencies and assets are included as additional layers on top of that image. You can choose a baseten default image for a supported python version (e.g. `BasetenImage.PY311`), this will also include GPU drivers if needed, or provide a custom image (e.g. `CustomImage(image="python:3.11-slim")`).  |
+| `pip_requirements_file` | *AbsPath\|None*                                                                              | Path to a file containing pip requirements. The file content is naively concatenated with `pip_requirements`.                                                                                                                                                                                                                                          |
+| `pip_requirements`      | *list[str]*                                                                                  | A list of pip requirements to install.  The items are naively concatenated with the content of the `pip_requirements_file`.                                                                                                                                                                                                                            |
+| `apt_requirements`      | *list[str]*                                                                                  | A list of apt requirements to install.                                                                                                                                                                                                                                                                                                                 |
+| `data_dir`              | *AbsPath\|None*                                                                              | Data from this directory is copied into the docker image and accessible to the remote chainlet at runtime.                                                                                                                                                                                                                                             |
+| `external_package_dirs` | *list[AbsPath]\|None*                                                                        | A list of directories containing additional python packages outside the chain’s workspace dir, e.g. a shared library. This code is copied into the docker image and importable at runtime.                                                                                                                                                             |

 ### *class* `truss_chains.BasetenImage`

@@ -277,11 +230,12 @@
 Default images, curated by baseten, for different python versions. If a Chainlet
 uses GPUs, drivers will be included in the image.

-#### PY310 *= 'py310'*
-
-#### PY311 *= 'py311'*
+| Enum Member | Value   |
+|-------------|---------|
+| `PY310`     | *py310* |
+| `PY311 `    | *py311* |
+| `PY39`      | *py39*  |

-#### PY39 *= 'py39'*

 ### *class* `truss_chains.CustomImage`

@@ -291,42 +245,35 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `image` | *str* |  |
-| `python_executable_path` | *str\|None* |  |
-| `docker_auth` | *DockerAuthSettings\|None* |  |
-
-
-#### docker_auth *: DockerAuthSettings | None*
-
-#### image *: str*
-
-#### python_executable_path *: str | None*
+| Name                     | Type                       | Description                                                                                              |
+|--------------------------|----------------------------|----------------------------------------------------------------------------------------------------------|
+| `image`                  | *str*                      | Reference to image on dockerhub.                                                                         |
+| `python_executable_path` | *str\|None*                | Absolute path to python executable (if default `python` is ambiguous).                                   |
+| `docker_auth`            | *DockerAuthSettings\|None* | See [corresponding truss config](https://docs.baseten.co/truss-reference/config#base-image-docker-auth). |

 ### *class* `truss_chains.Compute`

 Specifies which compute resources a chainlet has in the *remote* deployment.

-#### NOTE
+<Note>
 Not all combinations can be exactly satisfied by available hardware, in some
 cases more powerful machine types are chosen to make sure requirements are met
 or over-provisioned. Refer to the
 [baseten instance reference](https://docs.baseten.co/performance/instances).
-
+</Note>

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `cpu_count` | *int* | Minimum number of CPUs to allocate. |
-| `memory` | *str* | Minimum memory to allocate, e.g. “2Gi” (2 gibibytes). |
-| `gpu` | *str\|Accelerator\|None* | GPU accelerator type, e.g. “A10G”, “A100”, refer to the [truss config](https://docs.baseten.co/reference/config#resources-accelerator) for more choices. |
-| `gpu_count` | *int* | Number of GPUs to allocate. |
-| `predict_concurrency` | *int\|Literal['cpu_count']* | Number of concurrent requests a single replica of a deployed chainlet handles. |
-
+| Name                  | Type                        | Description                                                                                                                                              |
+|-----------------------|-----------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `cpu_count`           | *int*                       | Minimum number of CPUs to allocate.                                                                                                                      |
+| `memory`              | *str*                       | Minimum memory to allocate, e.g. “2Gi” (2 gibibytes).                                                                                                    |
+| `gpu`                 | *str\|Accelerator\|None*    | GPU accelerator type, e.g. “A10G”, “A100”, refer to the [truss config](https://docs.baseten.co/reference/config#resources-accelerator) for more choices. |
+| `gpu_count`           | *int*                       | Number of GPUs to allocate.                                                                                                                              |
+| `predict_concurrency` | *int\|Literal['cpu_count']* | Number of concurrent requests a single replica of a deployed chainlet handles.                                                                           |

-Concurrency concepts are explained in [this guide](https://docs.baseten.co/deploy/guides/concurrency#predict-concurrency). # noqa: E501
+Concurrency concepts are explained
+in [this guide](https://docs.baseten.co/deploy/guides/concurrency#predict-concurrency).
 It is important to understand the difference between predict_concurrency and
 the concurrency target (used for autoscaling, i.e. adding or removing replicas).
 Furthermore, the `predict_concurrency` of a single instance is implemented in
@@ -337,52 +284,33 @@
 - With a threadpool if it’s a synchronous function. This requires
   that the threads don’t have significant CPU load (due to the GIL).

-#### get_spec()
-
-* **Return type:**
-  *ComputeSpec*
-
 ### *class* `truss_chains.Assets`

 Specifies which assets a chainlet can access in the remote deployment.

 For example, model weight caching can be used like this:

-```default
+```python
 import truss_chains as chains
 from truss.base import truss_config

 mistral_cache = truss_config.ModelRepo(
     repo_id="mistralai/Mistral-7B-Instruct-v0.2",
     allow_patterns=["*.json", "*.safetensors", ".model"]
-  )
+)
 chains.Assets(cached=[mistral_cache], ...)
 ```

 See [truss caching guide](https://docs.baseten.co/deploy/guides/model-cache#enabling-caching-for-a-model)
 for more details on caching.

-
 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `cached` | *Iterable[ModelRepo]* | One or more `truss_config.ModelRepo` objects. |
-| `secret_keys` | *Iterable[str]* | Names of secrets stored on baseten, that the chainlet should have access to. You can manage secrets on baseten [here](https://app.baseten.co/settings/secrets). |
-| `external_data` | *Iterable[ExternalDataItem]* |  |
-
-
-    Data to be downloaded from public URLs and made available
-    in the deployment (via `context.data_dir`). See
-    [here](https://docs.baseten.co/reference/config#external-data) for
-    more details.
-
-#### get_spec()
-
-Returns parsed and validated assets.
-
-* **Return type:**
-  *AssetSpec*
+| Name            | Type                         | Description                                                                                                                                                                                |
+|-----------------|------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `cached`        | *Iterable[ModelRepo]*        | One or more `truss_config.ModelRepo` objects.                                                                                                                                              |
+| `secret_keys`   | *Iterable[str]*              | Names of secrets stored on baseten, that the chainlet should have access to. You can manage secrets on baseten [here](https://app.baseten.co/settings/secrets).                            |
+| `external_data` | *Iterable[ExternalDataItem]* | Data to be downloaded from public URLs and made available in the deployment (via `context.data_dir`). See [here](https://docs.baseten.co/reference/config#external-data) for more details. |

 # Core

@@ -395,24 +323,26 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `entrypoint` | *Type[ABCChainlet]* | The chainlet class that serves as the entrypoint to the chain. |
-| `chain_name` | *str* | The name of the chain. |
-| `publish` | *bool* | Whether to publish the chain as a published deployment (it is a draft deployment otherwise) |
-| `promote` | *bool* | Whether to promote the chain to be the production deployment (this implies publishing as well). |
-| `only_generate_trusses` | *bool* | Used for debugging purposes. If set to True, only the the underlying truss models for the chainlets are generated in `/tmp/.chains_generated`. |
-| `remote` | *str\|None* | name of a remote config in .trussrc. If not provided, it will be inquired. |
-| `environment` | *str\|None* | The name of an environment to promote deployment into. |
+| Name                    | Type                                                     | Description                                                                                                                                                                 |
+|-------------------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| `entrypoint`            | *Type[[ChainletBase](#class-truss-chains-chainletbase)]* | The chainlet class that serves as the entrypoint to the chain.                                                                                                              |
+| `chain_name`            | *str*                                                    | The name of the chain.                                                                                                                                                      |
+| `publish`               | *bool*                                                   | Whether to publish the chain as a published deployment (it is a draft deployment otherwise)                                                                                 |
+| `promote`               | *bool*                                                   | Whether to promote the chain to be the production deployment (this implies publishing as well).                                                                             |
+| `only_generate_trusses` | *bool*                                                   | Used for debugging purposes. If set to True, only the the underlying truss models for the chainlets are generated in `/tmp/.chains_generated`.                              |
+| `remote`                | *str\|None*                                              | name of a remote config in .trussrc. If not provided, it will be inquired.                                                                                                  |
+| `environment`           | *str\|None*                                              | The name of an environment to promote deployment into.                                                                                                                      |

 * **Returns:**
   A chain service handle to the deployed chain.
 * **Return type:**
-  *BasetenChainService*
+  [*ChainService*](#class-truss-chains-remote-chainservice)

-### *class* `truss_chains.remote.ChainService`
+### `truss_chains.deploy_remotely`
+
+Deprecated, use [`push`](#truss-chains-push) instead.

-Bases: `ABC`
+### *class* `truss_chains.remote.ChainService`

 Handle for a deployed chain.

@@ -420,29 +350,13 @@
 bundles the individual services for each chainlet in the chain, and provides
 utilities to query their status, invoke the entrypoint etc.

-
-**Parameters:**
-
-| Name | Type | Description |
-|------|------|-------------|
-| `name` | *str* |  |
-| `entrypoint_service` | *TrussService* |  |
-
-
-#### *property* entrypoint_fake_json_data *: Any*
-
-Fake JSON example data that matches the entrypoint’s input schema.
-This property must be externally populated.
-
-* **Raises:**
-  **ValueError** – If fake data was not set.
-
-#### *abstract* get_info()
+#### get_info()

 Queries the statuses of all chainlets in the chain.

 * **Returns:**
-  List of `DeployedChainlet` for each chainlet.
+  List of `DeployedChainlet`, `(name, is_entrypoint, status, logs_url)`
+  for each chainlet.
 * **Return type:**
   list[*DeployedChainlet*]

@@ -452,18 +366,23 @@

 Invokes the entrypoint with JSON data.

+
+**Parameters:**
+
+| Name   | Type                 | Description                  |
+|--------|----------------------|------------------------------|
+| `json` | *JSON dict*          | Input data to the entrypoint |
+
 * **Returns:**
   The JSON response.
-* **Parameters:**
-  **json** (*Dict*)
 * **Return type:**
   *Any*

-#### *abstract property* run_remote_url *: str*
+#### *property* run_remote_url *: str*

 URL to invoke the entrypoint.

-#### *abstract property* status_page_url *: str*
+#### *property* status_page_url *: str*

 Link to status page on Baseten.

@@ -485,12 +404,12 @@
 You can now in `root/sub_package/chainlet.py` point to the requirements
 file like this:

-```default
+```python
 shared = make_abs_path_here("../common_requirements.text")
 specific = make_abs_path_here("chainlet_requirements.text")
 ```

-#### WARNING
+<Warning>
 This helper uses the directory of the immediately calling module as an
 absolute reference point for resolving the file location. Therefore,
 you MUST NOT wrap the instantiation of `make_abs_path_here` into a
@@ -498,7 +417,7 @@

 Ok:

-```default
+```python
 def foo(path: AbsPath):
     abs_path = path.abs_path

@@ -508,7 +427,7 @@

 Not Ok:

-```default
+```python
 def foo(path: str):
     dangerous_value = make_abs_path_here(path).abs_path

@@ -516,8 +435,15 @@
 foo("./somewhere")
 ```

-* **Parameters:**
-  **file_path** (*str*)
+</Warning>
+
+**Parameters:**
+
+| Name        | Type  | Description                |
+|-------------|-------|----------------------------|
+| `file_path` | *str* | Absolute or relative path. |
+
+
 * **Return type:**
   *AbsPath*

@@ -526,23 +452,23 @@
 Context manager local debug execution of a chain.

 The arguments only need to be provided if the chainlets explicitly access any the
-corresponding fields of `DeploymentContext`.
-
+corresponding fields of
+[`DeploymentContext`](#class-truss-chains-deploymentcontext).

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `secrets` | *Mapping[str,str]\|None* | A dict of secrets keys and values to provide to the chainlets. |
-| `data_dir` | *Path\|str\|None* | Path to a directory with data files. |
-| `chainlet_to_service` | *Mapping[str,[ServiceDescriptor](#truss_chains.ServiceDescriptor* | A dict of chainlet names to service descriptors. |
+| Name                  | Type                                                                     | Description                                                    |
+|-----------------------|--------------------------------------------------------------------------|----------------------------------------------------------------|
+| `secrets`             | *Mapping[str,str]\|None*                                                 | A dict of secrets keys and values to provide to the chainlets. |
+| `data_dir`            | *Path\|str\|None*                                                        | Path to a directory with data files.                           |
+| `chainlet_to_service` | *Mapping[str,[ServiceDescriptor](#class-truss-chains-servicedescriptor)* | A dict of chainlet names to service descriptors.               |

 * **Return type:**
   *ContextManager*[None]

 Example usage (as trailing main section in a chain file):

-```default
+```python
 import os
 import truss_chains as chains

@@ -568,7 +494,8 @@
     print(result)
 ```

-Refer to the [local debugging guide](https://docs.baseten.co/chains/guide#test-a-chain-locally)
+Refer to the
+[local debugging guide](https://docs.baseten.co/chains/guide#test-a-chain-locally)
 for more details.

 ### *class* `truss_chains.ServiceDescriptor`
@@ -580,22 +507,13 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `name` | *str* |  |
-| `predict_url` | *str* |  |
-| `options` | *[RPCOptions](#truss_chains.RPCOptions* |  |
-
-
-#### name *: str*
-
-#### options *: [RPCOptions](#truss_chains.RPCOptions)*
-
-#### predict_url *: str*
+| Name          | Type                                           | Description |
+|---------------|------------------------------------------------|-------------|
+| `name`        | *str*                                          |             |
+| `predict_url` | *str*                                          |             |
+| `options`     | *[RPCOptions](#class-truss-chains-rpcoptions)* |             |

-### *class* `truss_chains.StubBase`
-
-Bases: `ABC`
+## *class* `truss_chains.StubBase`

 Base class for stubs that invoke remote chainlets.

@@ -603,17 +521,18 @@
 in user-code for wrapping a deployed truss model into the chains framework, e.g.
 like that:

-```default
+```python
 import pydantic
 import truss_chains as chains

+
 class WhisperOutput(pydantic.BaseModel):
     ...


 class DeployedWhisper(chains.StubBase):

-    async def run_remote(self, audio_b64: str) -&gt; WhisperOutput:
+    async def run_remote(self, audio_b64: str) -> WhisperOutput:
         resp = await self._remote.predict_async(
             json_payload={"audio": audio_b64})
         return WhisperOutput(text=resp["text"], language=resp["language"])
@@ -630,28 +549,24 @@
         )
 ```

-
 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `service_descriptor` | *[ServiceDescriptor](#truss_chains.ServiceDescriptor* | Contains the URL and other configuration. |
-| `api_key` | *str* | A baseten API key to authorize requests. |
-
+| Name                 | Type                                                         | Description                               |
+|----------------------|--------------------------------------------------------------|-------------------------------------------|
+| `service_descriptor` | *[ServiceDescriptor](#class-truss-chains-servicedescriptor)* | Contains the URL and other configuration. |
+| `api_key`            | *str*                                                        | A baseten API key to authorize requests.  |

 #### *classmethod* from_url(predict_url, context, options=None)

 Factory method, convenient to be used in chainlet’s `__init__`-method.

-
 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `predict_url` | *str* | URL to predict endpoint of another chain / truss model. |
-| `context` | *[DeploymentContext](#truss_chains.DeploymentContext* | Deployment context object, obtained in the chainlet’s `__init__`. |
-| `options` | *[RPCOptions](#truss_chains.RPCOptions* | RPC options, e.g. retries. |
-
+| Name          | Type                                                         | Description                                                       |
+|---------------|--------------------------------------------------------------|-------------------------------------------------------------------|
+| `predict_url` | *str*                                                        | URL to predict endpoint of another chain / truss model.           |
+| `context`     | *[DeploymentContext](#class-truss-chains-deploymentcontext)* | Deployment context object, obtained in the chainlet’s `__init__`. |
+| `options`     | *[RPCOptions](#class-truss-chains-rpcoptions)*               | RPC options, e.g. retries.                                        |

 ### *class* `truss_chains.RemoteErrorDetail`

@@ -663,20 +578,13 @@

 **Parameters:**

-| Name | Type | Description |
-|------|------|-------------|
-| `remote_name` | *str* |  |
-| `exception_cls_name` | *str* |  |
-| `exception_module_name` | *str\|None* |  |
-| `exception_message` | *str* |  |
-| `user_stack_trace` | *list[StackFrame]* |  |
-
-
-#### exception_cls_name *: str*
-
-#### exception_message *: str*
-
-#### exception_module_name *: str | None*
+| Name                    | Type               | Description |
+|-------------------------|--------------------|-------------|
+| `remote_name`           | *str*              |             |
+| `exception_cls_name`    | *str*              |             |
+| `exception_module_name` | *str\|None*        |             |
+| `exception_message`     | *str*              |             |
+| `user_stack_trace`      | *list[StackFrame]* |             |

 #### format()

@@ -685,7 +593,3 @@

 * **Return type:**
   str
-
-#### remote_name *: str*
-
-#### user_stack_trace *: list[StackFrame]*
