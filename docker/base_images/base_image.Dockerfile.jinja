{% if use_gpu %}
ARG BUILD_CUDA_FLAVOR=base       # base | devel
ARG RUNTIME_CUDA_FLAVOR=base     # base | devel

# --- build stage (optional compile, e.g., CUDA ops via pip) ---
FROM nvidia/cuda:12.2.2-${BUILD_CUDA_FLAVOR}-ubuntu20.04 AS build
ENV PYTHONUNBUFFERED="True"
ENV DEBIAN_FRONTEND="noninteractive"
# Minimal Python toolchain just to build wheels
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        bash git curl ca-certificates software-properties-common \
        python{{python_version}} python{{python_version}}-venv python{{python_version}}-dev && \
    rm -rf /var/lib/apt/lists/*
RUN ln -sf /usr/bin/python{{python_version}} /usr/bin/python3 && \
    curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py && \
    python3 /tmp/get-pip.py && \
    python3 -m pip install --no-cache-dir --upgrade pip
COPY ./requirements.txt /tmp/requirements.txt
# Build wheels here (CUDA extensions will use nvcc if BUILD_CUDA_FLAVOR=devel)
RUN python3 -m pip wheel --no-deps -r /tmp/requirements.txt -w /wheelhouse

# --- runtime stage (what you actually run) ---
FROM nvidia/cuda:12.2.2-${RUNTIME_CUDA_FLAVOR}-ubuntu20.04
ENV CUDNN_VERSION="8.9.5.29"
ENV CUDA="12.2"
ENV LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH"

RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub && \
    apt-get update && apt-get install -y --no-install-recommends \
        ca-certificates \
        cuda-command-line-tools-12-2 \
        libcublas-12-2 \
        libcublas-dev-12-2 \
        libcufft-12-2 \
        libcurand-12-2 \
        libcusolver-12-2 \
        libcusparse-12-2 \
        libcudnn8=${CUDNN_VERSION}-1+cuda${CUDA} \
        libgomp1 \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Allow statements and log messages to immediately appear in the Knative logs
ENV PYTHONUNBUFFERED="True"
ENV DEBIAN_FRONTEND="noninteractive"

RUN apt update && \
    apt install -y bash \
                   build-essential \
                   git \
                   curl \
                   ca-certificates \
                   software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt update -y && \
    apt install -y python{{python_version}} && \
    apt install -y python{{python_version}}-venv && \
    apt install -y python{{python_version}}-dev && \
    rm -rf /var/lib/apt/lists

RUN ln -sf /usr/bin/python{{python_version}} /usr/bin/python3 && \
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3 get-pip.py

RUN python3 -m pip install --no-cache-dir --upgrade pip

{% else %}
FROM python:{{python_version}}
RUN apt update && apt install -y

# Allow statements and log messages to immediately appear in the Knative logs
ENV PYTHONUNBUFFERED="True"
{% endif %}


RUN pip install --no-cache-dir --upgrade pip \
    && rm -rf /root/.cache/pip

COPY ./requirements.txt requirements.txt
{% if use_gpu %}
# Prefer prebuilt wheels (from build stage); fall back to source if not present.
COPY --from=build /wheelhouse /opt/wheelhouse
RUN (ls -1 /opt/wheelhouse/*.whl >/dev/null 2>&1 && pip install --no-cache-dir /opt/wheelhouse/*.whl) || \
    pip install --no-cache-dir -r requirements.txt \
    && rm -rf /root/.cache/pip
{% else %}
RUN pip install --no-cache-dir -r requirements.txt \
    && rm -rf /root/.cache/pip
{% endif %}
