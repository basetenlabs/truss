name: Reusable Integration Tests

on:
  workflow_call:
    inputs:
      run_only_integration:
        type: boolean
        required: false
        default: true
      store_durations_serially:
        type: boolean
        required: false
        default: false

jobs:
  determine-python-versions:
    runs-on: ubuntu-22.04
    outputs:
      min_supported_python_version: ${{ steps.extract.outputs.min_supported_python_version }}
      max_supported_python_version: ${{ steps.extract.outputs.max_supported_python_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies for version extraction
        run: pip install tomlkit packaging
      - name: Extract Python Version Range
        id: extract
        run: |
          python .github/scripts/get-python-version-range.py

  store-test-durations:
    if: ${{ inputs.store_durations_serially }}
    runs-on: ubuntu-22.04
    needs: determine-python-versions
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python/
        with:
          python-version: ${{ needs.determine-python-versions.outputs.max_supported_python_version }}
      - run: poetry install --with=dev,dev-server --extras=all
      - name: Run all tests serially and store durations
        run: |
          poetry run pytest truss/tests -m integration --store-durations --durations-path=test_durations.json
      - name: Save test durations to cache
        uses: actions/cache/save@v4
        with:
          path: test_durations.json
          key: integration-test-durations-v1


  truss-integration-tests:
    if: ${{ !inputs.store_durations_serially }}
    needs: determine-python-versions
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python_version: [
          "${{ needs.determine-python-versions.outputs.min_supported_python_version }}",
          "${{ needs.determine-python-versions.outputs.max_supported_python_version }}"
        ]
        split_group: ["1", "2", "3", "4", "5"]
    steps:
      - uses: actions/checkout@v4
      - name: Restore test durations from cache
        uses: actions/cache/restore@v4
        with:
          path: test_durations.json
          key: integration-test-durations-v1
        continue-on-error: true
      - uses: ./.github/actions/setup-python/
        with:
          python-version: ${{ matrix.python_version }}
      - run: |
          sudo mkdir -p /bptr && sudo chown $(whoami):$(whoami) /bptr
          sudo mkdir -p /static-bptr && sudo chown $(whoami):$(whoami) /static-bptr
          sudo mkdir -p /cache && sudo chown $(whoami):$(whoami) /cache
      - run: poetry install --with=dev,dev-server --extras=all
      - name: Run Pytest
        run: |
          if [[ "${{ inputs.run_only_integration }}" == "true" ]]; then
            test_marker="-m integration"
          else
            test_marker=""
          fi

          poetry run pytest truss/tests $test_marker \
            --durations=20 \
            --junitxml=report-${{ matrix.python_version }}-${{ matrix.split_group }}.xml \
            --splits 5 \
            --group ${{ matrix.split_group }} \
            --durations-path test_durations.json \
            --splitting-algorithm=least_duration
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          report_paths: "report-${{ matrix.python_version }}-${{ matrix.split_group }}.xml"

  chains-integration-tests:
    if: ${{ !inputs.store_durations_serially }}
    needs: determine-python-versions
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python_version: [
          "${{ needs.determine-python-versions.outputs.min_supported_python_version }}",
          "${{ needs.determine-python-versions.outputs.max_supported_python_version }}"
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-python/
        with:
          python-version: ${{ matrix.python_version }}
      - run: sudo mkdir -p /bptr && sudo chown $(whoami):$(whoami) /bptr
      - run: poetry install --with=dev,dev-server --extras=all
      - name: Run Chains Tests
        run: |
          if [[ "${{ inputs.run_only_integration }}" == "true" ]]; then
            test_marker="-m integration"
          else
            test_marker=""
          fi

          poetry run pytest truss-chains/tests \
            --durations=20 $test_marker \
            --junitxml=report-${{ matrix.python_version }}.xml \
            -s --log-cli-level=INFO
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          report_paths: "report-${{ matrix.python_version }}.xml"
