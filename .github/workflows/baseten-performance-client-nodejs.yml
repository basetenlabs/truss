name: baseten-performance-client-nodejs
defaults:
  run:
    working-directory: baseten-performance-client/node_bindings
env:
  DEBUG: napi:*
  DISABLE_V8_COMPILE_CACHE: 1
  APP_NAME: performance-client
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths:
      - "baseten-performance-client/**"
      - ".github/workflows/**"
  pull_request: null
  workflow_dispatch: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: windows-latest
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
              yarn test
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: yarn build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: yarn build --target aarch64-unknown-linux-gnu
          # TODO: enable again
          #   crypto/ct/ct_log.c:166:15: error: use of undeclared identifier 'ssl'
          #     <command line>:18:21: note: expanded from macro 'OPENSSLDIR'
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: yarn build --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: yarn build --target armv7-unknown-linux-musleabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: yarn build --target armv7-linux-androideabi
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: |-
          #     set -e &&
          #     rustup target add aarch64-unknown-linux-musl &&
          #     yarn build --target aarch64-unknown-linux-musl

          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
            build: yarn build --target riscv64gc-unknown-linux-gnu
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/baseten-performance-client/node_bindings'
          run: |
            if command -v apk &> /dev/null; then
              # Alpine-based image
              apk add --no-cache perl openssl-dev build-base
            elif command -v apt-get &> /dev/null; then
              # Debian-based image
              apt-get update && apt-get install -y perl libssl-dev libatomic-ops-dev
            elif command -v yum &> /dev/null; then
                yum install openssl-devel devtoolset-10-libatomic-devel perl-IPC-Cmd -y
            else
              echo "Unsupported package manager. Please install perl and openssl-dev manually."
              exit 1
            fi
            ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: List build output
        run: |
          find . -name "*.node" -type f
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ env.APP_NAME }}.*.node
            baseten-performance-client/node_bindings/${{ env.APP_NAME }}.*.node
            baseten-performance-client/node_bindings/*.node
          if-no-files-found: error
  build-freebsd:
    runs-on: macos-13
    if: false # we currently do not compile this
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: cross-platform-actions/action@v0.24.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: '13.2'
          memory: 8G
          cpu_count: 3
          environment_variables: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl node libnghttp2 npm
            sudo npm install -g yarn --ignore-scripts
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ yarn --version ~~~~"
            yarn --version
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            yarn install
            yarn build
            yarn test
            rm -rf node_modules
            rm -rf target
            rm -rf .yarn/cache
      - name: List build output
        run: |
          find . -name "*.node" -type f
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: |
            ${{ env.APP_NAME }}.*.node
            baseten-performance-client/node_bindings/${{ env.APP_NAME }}.*.node
            baseten-performance-client/node_bindings/*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
          architecture: x64
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: |
          echo "Current directory: $(pwd)"
          echo "Node __dirname: $(node -e "console.log(require('path').resolve(__dirname))")"
          cp baseten-performance-client/node_bindings/*.node .
          yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build/ node:${{ matrix.node }}-slim bash -c "cp baseten-performance-client/node_bindings/*.node . && yarn test"
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build/ node:${{ matrix.node }}-alpine sh -c "cp baseten-performance-client/node_bindings/*.node . && yarn test"
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    if: false # relative path issue.
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build/'
          run: |
            set -e
            cp baseten_performance_client/node_bindings/*.node .
            yarn test
            ls -la
  test-linux-aarch64-musl-binding:
    if: false # TODO: we don't compile for this yet
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build/'
          run: |
            set -e
            cp baseten_performance_client/node_bindings/*.node .
            yarn test
  test-linux-arm-gnueabihf-binding:
    if: false # relative path issue.
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: baseten-performance-client/node_bindings
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: '--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build/'
          run: |
            set -e
            # cannot stat baseten_performance_client/node_bindings/*.node: No such file or directory
            # --
            cp baseten_performance_client/node_bindings/*.node .
            yarn test
            ls -la
  universal-macOS:
    if: true # we currently do not compile this
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: baseten-performance-client/node_bindings
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: baseten-performance-client/node_bindings
      - name: 'Debug: Show current location and list all files'
        run: |
          pwd
          ls -R
        shell: bash
      - name: Combine binaries
        run: |
          mkdir -p artifacts
          cp baseten-performance-client/node_bindings/*.node ./artifacts
          yarn universal
      - name: List build output
        run: |
          find . -name "*.node" -type f
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: |
            ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    # only run on tag or workflow_dispatch
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      # - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      # - test-linux-aarch64-gnu-binding
      # - test-linux-aarch64-musl-binding
      # - test-linux-arm-gnueabihf-binding
      # - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: baseten-performance-client/node_bindings/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: baseten-performance-client/node_bindings/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          # npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
          echo "publishing release anyways with --next for debugging. "
          npm publish --access public || echo "publishing failed."
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
