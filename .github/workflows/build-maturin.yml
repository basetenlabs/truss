# This file is autogenerated by maturin v1.8.1
# To update, run
#
#    maturin generate-ci github
#
name: truss-transfer-build-maturin

on:
  workflow_call:
    inputs:
      folder:
        description: "The folder containing the package to build."
        required: true
        type: string
      publish_pypi: # New input parameter
        description: "Whether to publish the package to PyPI."
        required: false
        type: boolean
        default: false
    secrets:
      PYPI_TOKEN:
        description: "The PyPI token for publishing."
        required: true # Still required if publish_pypi is true
      PERF_CLIENT_STAGING_ADDRESS:
        description: "Staging address for the performance client."
        required: false

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    env:
      PERF_CLIENT_STAGING_ADDRESS: ${{ secrets.PERF_CLIENT_STAGING_ADDRESS }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
            manylinux: auto
            ft: true
          - runner: ubuntu-22.04
            target: x86
            manylinux: auto
            ft: true
          - runner: ubuntu-22.04
            target: aarch64
            manylinux: manylinux_2_28
            ft: false
          - runner: ubuntu-22.04
            target: armv7
            manylinux: manylinux_2_28
            ft: false
            # - runner: ubuntu-22.04
            #   target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
            manylinux: auto
            ft: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
          manylinux: ${{ matrix.platform.manylinux }}
          # set export CFLAGS_aarch64_unknown_linux_gnu="-D__ARM_ARCH=8" for aarch64
          # docker-options: >
          #   ${{ matrix.platform.target == 'aarch64' && '--env CFLAGS_aarch64_unknown_linux_gnu="-D__ARM_ARCH=8"' || '' }}
          before-script-linux: |
            if command -v apt-get &> /dev/null; then
                apt-get update && apt-get install libssl-dev libatomic-ops-dev -y
            elif command -v yum &> /dev/null; then
                yum install openssl-devel perl-IPC-Cmd -y
            else
                echo "Neither apt-get nor yum is installed. Please install a package manager."
                exit 1
            fi
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        if: ${{ matrix.platform.ft }}
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python3.13t
          sccache: "false"
          manylinux: auto
          docker-options: >
            ${{ matrix.platform.target == 'armv7' && '--env RING_PREGENERATE_ASM=false' || '' }}
          before-script-linux: |
            if command -v apt-get &> /dev/null; then
                apt-get update && apt-get install libssl-dev libatomic-ops-dev -y
            elif command -v yum &> /dev/null; then
                yum install openssl-devel perl-IPC-Cmd -y
            else
                echo "Neither apt-get nor yum is installed. Please install a package manager."
                exit 1
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: ${{ inputs.folder }}/dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    env:
      PERF_CLIENT_STAGING_ADDRESS: ${{ secrets.PERF_CLIENT_STAGING_ADDRESS }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
          manylinux: musllinux_1_2
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python3.13t
          sccache: "false"
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: ${{ inputs.folder }}/dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    env:
      PERF_CLIENT_STAGING_ADDRESS: ${{ secrets.PERF_CLIENT_STAGING_ADDRESS }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
      # - name: Build free-threaded wheels
      #   uses: PyO3/maturin-action@v1
      #   with:
      #     target: ${{ matrix.platform.target }}
      #     args: --release --out dist -i python3.13t
      #     sccache: 'false'
      #     working-directory: truss-transfer
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: ${{ inputs.folder }}/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    env:
      PERF_CLIENT_STAGING_ADDRESS: ${{ secrets.PERF_CLIENT_STAGING_ADDRESS }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: "false"
      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python3.13t
          sccache: "false"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: ${{ inputs.folder }}/dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ${{ inputs.folder }}
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ${{ inputs.folder }}/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    # This job will run if triggered by a tag or manually.
    # The decision to publish within this job is now controlled by inputs.publish_pypi
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ inputs.publish_pypi }} # Use the input parameter here
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
