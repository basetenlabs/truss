name: Detect Version Changed

on:
  workflow_call:
    outputs:
      version_changed:
        value: ${{ jobs.detect-version-changed.outputs.version_changed }}
      new_version:
        value: ${{ jobs.detect-version-changed.outputs.new_version }}
      new_base_image_version:
        value: ${{ jobs.detect-version-changed.outputs.new_base_image_version }}
      build_base_images:
        value: ${{ jobs.detect-version-changed.outputs.build_base_images }}
      release_version:
        value: ${{ jobs.detect-version-changed.outputs.release_version }}
      is_prerelease_version:
        value: ${{ jobs.detect-version-changed.outputs.is_prerelease_version }}

jobs:
  detect-version-changed:
    runs-on: ubuntu-22.04
    outputs:
      version_changed: ${{ steps.versions.outputs.version_changed }}
      new_version: ${{ steps.versions.outputs.new_version }}
      new_base_image_version: ${{ steps.versions.outputs.new_base_image_version }}
      build_base_images: ${{ steps.versions.outputs.build_base_images }}
      release_version: ${{ steps.versions.outputs.release_version }}
      is_prerelease_version: ${{ steps.versions.outputs.is_prerelease_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BASETENBOT_GITHUB_TOKEN }}
          fetch-depth: 2
      - uses: ./.github/actions/setup-python/
      - id: versions
        shell: bash
        run: |
          NEW_VERSION=$(uv version | awk '{print $2}')
          NEW_BASE_IMAGE_VERSION=$(grep TRUSS_BASE_IMAGE_VERSION_TAG truss/contexts/image_builder/util.py | cut -d'=' -f2 | cut -d'"' -f2)

          git checkout HEAD^1 -- pyproject.toml truss/contexts/image_builder/util.py
          OLD_VERSION=$(uv version | awk '{print $2}')
          OLD_BASE_IMAGE_VERSION=$(grep TRUSS_BASE_IMAGE_VERSION_TAG truss/contexts/image_builder/util.py | cut -d'=' -f2 | cut -d'"' -f2)

          git checkout HEAD -- pyproject.toml truss/contexts/image_builder/util.py

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_base_image_version=$NEW_BASE_IMAGE_VERSION" >> $GITHUB_OUTPUT

          if [[ "$NEW_VERSION" != "$OLD_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            if [[ "$NEW_VERSION" == *"dev"* ]]; then
              echo "release_version=false" >> $GITHUB_OUTPUT
            else
              echo "release_version=true" >> $GITHUB_OUTPUT
              if [[ "$NEW_VERSION" == *"rc"* ]]; then
                echo "is_prerelease_version=true" >> $GITHUB_OUTPUT
              else
                echo "is_prerelease_version=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$NEW_BASE_IMAGE_VERSION" != "$OLD_BASE_IMAGE_VERSION" ]]; then
            echo "build_base_images=true" >> $GITHUB_OUTPUT
          else
            echo "build_base_images=false" >> $GITHUB_OUTPUT
          fi
