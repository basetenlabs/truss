# .github/workflows/create-rc-release.yml
name: Create RC Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'RC version to release'
        required: true
        type: string

# Prevent multiple simultaneous runs for security purposes
concurrency:
  group: create-rc-release
  cancel-in-progress: false

jobs:
  publish-rc-only:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    steps:
      - name: Check user permissions
        run: |
          # Only allow specific users to trigger (from secret)
          ALLOWED_USERS="${{ secrets.RC_RELEASE_ALLOWED_USERS }}"
          if [[ -z "$ALLOWED_USERS" ]]; then
            echo "❌ RC_RELEASE_ALLOWED_USERS secret not configured"
            exit 1
          fi
          if [[ ! "$ALLOWED_USERS" =~ "${{ github.actor }}" ]]; then
            echo "❌ User ${{ github.actor }} not authorized for RC releases"
            exit 1
          fi

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "✅ Expected format: X.Y.ZrcN (e.g., 0.11.13rc1)"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Validate version consistency
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Check pyproject.toml version
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          if [[ "$PYPROJECT_VERSION" != "$VERSION" ]]; then
            echo "❌ Version mismatch in pyproject.toml"
            echo "   Expected: $VERSION"
            echo "   Found: $PYPROJECT_VERSION"
            echo "   Please update pyproject.toml to match the RC version"
            exit 1
          fi

          # Check uv.lock version
          UV_LOCK_VERSION=$(grep -A1 'name = "truss"' uv.lock | grep 'version = ' | cut -d'"' -f2)
          if [[ "$UV_LOCK_VERSION" != "$VERSION" ]]; then
            echo "❌ Version mismatch in uv.lock"
            echo "   Expected: $VERSION"
            echo "   Found: $UV_LOCK_VERSION"
            echo "   Please run 'uv lock' to update uv.lock"
            exit 1
          fi

          echo "✅ Version consistency validated: $VERSION"

      - uses: ./.github/actions/setup-python/

      - name: Install packages
        run: uv sync --no-dev
      - name: Build
        run: uv build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true
