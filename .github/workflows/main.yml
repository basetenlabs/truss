name: main

on:
  push:
    branches:
      - main

concurrency:
  group: main-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  detect-version-changed:
    runs-on: ubuntu-20.04
    outputs:
      version_changed: ${{ steps.versions.outputs.version_changed }}
      new_version: ${{ steps.versions.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to use a different github token because GITHUB_TOKEN cannot trigger a workflow from another
          token: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
          fetch-depth: 2
      - run: curl -sSL https://install.python-poetry.org | python3 -
        shell: bash
      - id: versions
        run: |
          NEW_VERSION=$(poetry version | awk '{print $2}')

          git checkout HEAD^1 -- pyproject.toml
          OLD_VERSION=$(poetry version | awk '{print $2}')

          # Put back things into place
          git checkout HEAD -- pyproject.toml

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [[ "$NEW_VERSION" != "$OLD_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
  build-and-push-truss-base-images-if-needed:
    needs: [detect-version-changed]
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-python/
      - run: poetry install
      - shell: bash
        run: |
          if [[ "${{ needs.detect-version-changed.outputs.version_changed }}" == "true" ]]; then
            poetry run bin/generate_base_images.py --version-tag v${{ needs.detect-version-changed.outputs.new_version }} \
              --skip-login --push
          fi
  integration-tests:
    needs: [build-and-push-truss-base-images-if-needed, detect-version-changed]
    if: ! contains( needs.detect-version-changed.outputs.new_version, "dev" )
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-python/
      - run: poetry install
      - run: poetry run pytest truss/tests  -m 'integration'

  git-tag-if-version-changed:
    needs: [integration-tests, detect-version-changed]
    if: needs.detect-version-changed.outputs.version_changed == 'true' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to use a different github token because GITHUB_TOKEN cannot trigger a workflow from another
          token: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
      - run: |
          NEW_VERSION=v${{ needs.detect-version-changed.outputs.new_version }}
          git config --global user.name "Github action"
          git config --global user.email "github.action@baseten.co"

          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION

  build-n-push-context-builder-image:
    needs: [integration-tests, detect-version-changed]
    if: needs.detect-version-changed.outputs.version_changed == 'true' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1


    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: baseten/truss-context-builder

    - name: Docker Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./context_builder.Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: baseten/truss-context-builder:v${{ needs.detect-version-changed.outputs.new_version }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-to-pypi:
    needs: [integration-tests, detect-version-changed]
    if: needs.detect-version-changed.outputs.version_changed == 'true'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/actions/setup-python/

    - name: Install poetry packages
      run: poetry install --no-dev

    - name: Build
      run: poetry build

    - name: Publish to PyPI
      if: ${{ github.event_name != 'pull_request' }}
      run: poetry publish -u "${{ secrets.PYPI_USERNAME }}" -p "${{ secrets.PYPI_PASSWORD }}"
