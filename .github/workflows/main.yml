name: main

on:
  push:
    branches:
      - main

concurrency:
  group: main-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  detect-version-changed:
    runs-on: ubuntu-20.04
    outputs:
      version_changed: ${{ steps.versions.outputs.version_changed }}
      new_version: ${{ steps.versions.outputs.new_version }}
      new_base_image_version: ${{ steps.versions.outputs.new_base_image_version }}
      dev_version: ${{ steps.versions.outputs.dev_version }}
      build_base_images: ${{ steps.versions.outputs.build_base_images }}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to use a different github token because GITHUB_TOKEN cannot trigger a workflow from another
          token: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
          fetch-depth: 2
      - run: curl -sSL https://install.python-poetry.org | python3 -
        shell: bash
      - id: versions
        run: |
          NEW_VERSION=$(poetry version | awk '{print $2}')
          NEW_BASE_IMAGE_VERSION=$(poetry run python -c "from truss.contexts.image_builder.util import TRUSS_BASE_IMAGE_VERSION_TAG; print(TRUSS_BASE_IMAGE_VERSION_TAG)")

          git checkout HEAD^1 -- pyproject.toml truss/contexts/image_builder/util.py
          OLD_VERSION=$(poetry version | awk '{print $2}')
          OLD_BASE_IMAGE_VERSION=$(poetry run python -c "from truss.contexts.image_builder.util import TRUSS_BASE_IMAGE_VERSION_TAG; print(TRUSS_BASE_IMAGE_VERSION_TAG)")

          # Put back things into place
          git checkout HEAD -- pyproject.toml truss/contexts/image_builder/util.py

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_base_image_version=$NEW_BASE_IMAGE_VERSION" >> $GITHUB_OUTPUT

          if [[ "$NEW_VERSION" != "$OLD_VERSION" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$NEW_VERSION" == *"dev"* ]]; then
            echo "dev_version=true" >> $GITHUB_OUTPUT
          else
            echo "dev_version=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$NEW_BASE_IMAGE_VERSION" != "$OLD_BASE_IMAGE_VERSION" ]]; then
            echo "build_base_images=true" >> $GITHUB_OUTPUT
          else
            echo "build_base_images=false" >> $GITHUB_OUTPUT
          fi
  build-and-push-truss-base-images-if-needed:
    needs: [detect-version-changed]
    if: needs.detect-version-changed.outputs.build_base_images == 'true'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11"]
        use_gpu: ['y', 'n']
        job_type: ['server', 'training']
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-python/
      - run: poetry install
      - shell: bash
        run: |
          poetry run bin/generate_base_images.py \
            --live-reload both \
            --use-gpu ${{ matrix.use_gpu }}  \
            --python-version ${{ matrix.python_version }} \
            --job-type ${{ matrix.job_type }} \
            --version-tag ${{ needs.detect-version-changed.outputs.new_vernew_base_image_versionsion }} \
            --skip-login --push

  integration-tests:
    needs: [detect-version-changed, build-and-push-truss-base-images-if-needed]
    if: always() && needs.detect-version-changed.outputs.dev_version == 'false' && (needs.build-and-push-truss-base-images-if-needed.result == 'success' || needs.build-and-push-truss-base-images-if-needed.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-python/
      - run: poetry install
      - run: poetry run pytest truss/tests  -m 'integration'


  git-tag-if-version-changed:
    needs: [integration-tests, detect-version-changed]
    if: always() && needs.detect-version-changed.outputs.version_changed == 'true' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to use a different github token because GITHUB_TOKEN cannot trigger a workflow from another
          token: ${{secrets.BASETENBOT_GITHUB_TOKEN}}
      - run: |
          NEW_VERSION=v${{ needs.detect-version-changed.outputs.new_version }}
          git config --global user.name "Github action"
          git config --global user.email "github.action@baseten.co"

          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin $NEW_VERSION

  build-n-push-context-builder-image:
    needs: [integration-tests, detect-version-changed]
    if: always() && needs.detect-version-changed.outputs.version_changed == 'true' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1


    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: baseten/truss-context-builder

    - name: Docker Build
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./context_builder.Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: baseten/truss-context-builder:v${{ needs.detect-version-changed.outputs.new_version }}
        labels: ${{ steps.meta.outputs.labels }}

  publish-to-pypi:
    needs: [integration-tests, detect-version-changed]
    if: needs.detect-version-changed.outputs.version_changed == 'true'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - uses: ./.github/actions/setup-python/

    - name: Install poetry packages
      run: poetry install --no-dev

    - name: Build
      run: poetry build

    - name: Publish to PyPI
      if: ${{ github.event_name != 'pull_request' }}
      run: poetry publish -u "${{ secrets.PYPI_USERNAME }}" -p "${{ secrets.PYPI_PASSWORD }}"
