[tool.poetry]
name = "truss"
version = "0.9.45rc009"
description = "A seamless bridge from model development to model delivery"
license = "MIT"
readme = "README.md"
authors = ["Pankaj Gupta <pankaj@baseten.co>", "Phil Howes <phil@baseten.co>"]
include = ["*.txt", "*.Dockerfile", "*.md"]
repository = "https://github.com/basetenlabs/truss"
keywords = [
    "MLOps",
    "AI",
    "Model Serving",
    "Model Deployment",
    "Machine Learning",
]


packages = [
    { include = "truss", from = "." },
    { include = "truss_chains", from = "./truss-chains" },
]


[tool.poetry.scripts]
truss = 'truss.cli:truss_cli'


[tool.poetry.urls]
"Homepage" = "https://truss.baseten.co"
"Bug Reports" = "https://github.com/basetenlabs/truss/issues"
"Documentation" = "https://truss.baseten.co"
"Baseten" = "https://baseten.co"


[tool.poetry.dependencies]
# "base" dependencies.
python = ">=3.8,<3.13"
huggingface_hub = { version = ">=0.25.0", optional = false }
pydantic = { version = ">=1.10.0", optional = false }
PyYAML = { version = ">=6.0", optional = false }
# "non-base" dependencies, these will be partitioned further.
Jinja2 = { version = "^3.1.2", optional = true }
aiofiles = { version = "^24.1.0", optional = true }
blake3 = { version = "^0.3.3", optional = true }
boto3 = { version = "^1.34.85", optional = true }
click = { version = "^8.0.3", optional = true }
fastapi = { version = ">=0.109.1", optional = true }
google-cloud-storage = { version = "2.10.0", optional = true }
httpx = { version = ">=0.24.1", optional = true }
inquirerpy = { version = "^0.3.4", optional = true }
libcst = { version = "<1.2.0", optional = true }
loguru = { version = ">=0.7.2", optional = true }
msgpack = { version = ">=1.0.2", optional = true }
msgpack-numpy = { version = ">=0.4.8", optional = true }
numpy = { version = ">=1.23.5", optional = true }
opentelemetry-api = { version = ">=1.25.0", optional = true }
opentelemetry-exporter-otlp = { version = ">=1.25.0", optional = true }
opentelemetry-sdk = { version = ">=1.25.0", optional = true }
packaging = { version = ">=20.9", optional = true }
pathspec = { version = ">=0.9.0", optional = true }
psutil = { version = ">=5.9.4", optional = true }
python-json-logger = { version = ">=2.0.2", optional = true }
python-on-whales = { version = "^0.68.0", optional = true }
requests = { version = ">=2.31", optional = true }
rich = { version = "^13.4.2", optional = true }
rich-click = { version = "^1.6.1", optional = true }
ruff = { version = "^0.4.8", optional = true }
single-source = { version = "^0.3.0", optional = true }
tenacity = { version = "^8.0.1", optional = true }
uvicorn = { version ="^0.24.0", optional = true }
watchfiles = { version = "^0.19.0", optional = true }


[tool.dependency_metadata]
# Base.
python = { components = "base", note = "When using chains, 3.9 will be required at runtime, but other truss functionality works with 3.8." }
PyYAML = { components = "base" }
huggingface_hub = { components = "base" }
pydantic = { components = "base", note = "We cannot upgrade to v2, due to customer needs." }
# Other.
Jinja2 = { components = "other,image_builder" }
aiofiles = { components = "other" }
blake3 = { components = "other,image_builder" }
boto3 = { components = "other,image_builder" }
click = { components = "other,image_builder" }
fastapi = { components = "other,image_builder" }
google-cloud-storage = { components = "other,image_builder" }
httpx = { components = "other,image_builder" }
inquirerpy = { components = "other" }
libcst = { components = "other" }
loguru = { components = "other,image_builder" }
msgpack = { components = "other" }
msgpack-numpy = { components = "other" }
numpy = { components = "other" }
opentelemetry-api = { components = "other" }
opentelemetry-exporter-otlp = { components = "other" }
opentelemetry-sdk = { components = "other" }
packaging = { components = "other,image_builder" }
pathspec = { components = "other,image_builder" }
psutil = { components = "other,image_builder" }
python-json-logger = { components = "other,image_builder" }
python-on-whales = { components = "other" }
requests = { components = "other,image_builder" }
rich = { components = "other,image_builder" }
rich-click = { components = "other" }
ruff = { components = "other", note = "Not a dev dep, needed for chains code gen." }
single-source = { components = "other,image_builder" }
tenacity = { components = "other,image_builder" }
uvicorn = { components = "image_builder" }
watchfiles = { components = "other" }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
coverage = "^6.4.1"
dockerfile = "^3.2.0"
flask = "^2.3.3"
httpx = { extras = ["cli"], version = "*" }
ipdb = "^0.13.9"
ipykernel = "^6.16.0"
ipython = "^7.16"
mypy = "^1.0.0"
nbconvert = "^7.2.1"
pre-commit = "^2.18.1"
pytest = "7.2.0"
pytest-asyncio = "^0.23.6"
pytest-cov = "^3.0.0"
pytest-split = "^0.8.1"
requests-mock = ">=1.11.0"
tomlkit = ">=0.12"
types-PyYAML = "^6.0.12.12"
types-aiofiles = ">=24.1.0"
types-requests = ">=2.31.0.2"
types-setuptools = "^69.0.0.0"
uvicorn = ">=0.24.0"
uvloop = ">=0.17.0"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.2.1"]

[tool.mypy]
ignore_missing_imports = true
python_version = "3.8"
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration (deselect with '-m \"not integration\"').",
    "asyncio: marks tests as async.",
]

[tool.ruff]
src = ["truss", "truss-chains", "truss-utils"]
target-version = "py38"
line-length = 88
lint.extend-select = [
    "I", # isort
]
lint.ignore = [
    "E402", # module-import-not-at-top
]

[tool.ruff.lint.isort]
# Matches the Google Python Style Guide.
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.extend-per-file-ignores]
"**tests/samples.py" = [
    "I", # isort
    "F", # flake8
]
"config.py" = [
    "I", # isort
    "F", # flake8
]

[tool.ruff.lint.pycodestyle]
# The formatter can go sometimes go over the 88-character limit, so we want to provide some buffer.
max-line-length = 120


# Note: `tool.poetry.extras` was autogenerated by `pyproject_toml_linter.py`, do not edit manually.
[tool.poetry.extras]
other = ["Jinja2", "aiofiles", "blake3", "boto3", "click", "fastapi", "google-cloud-storage", "httpx", "inquirerpy", "libcst", "loguru", "msgpack", "msgpack-numpy", "numpy", "opentelemetry-api", "opentelemetry-exporter-otlp", "opentelemetry-sdk", "packaging", "pathspec", "psutil", "python-json-logger", "python-on-whales", "requests", "rich", "rich-click", "ruff", "single-source", "tenacity", "watchfiles"]
image_builder = ["Jinja2", "blake3", "boto3", "click", "fastapi", "google-cloud-storage", "httpx", "loguru", "packaging", "pathspec", "psutil", "python-json-logger", "requests", "rich", "single-source", "tenacity", "uvicorn"]
all = ["Jinja2", "aiofiles", "blake3", "boto3", "click", "fastapi", "google-cloud-storage", "httpx", "inquirerpy", "libcst", "loguru", "msgpack", "msgpack-numpy", "numpy", "opentelemetry-api", "opentelemetry-exporter-otlp", "opentelemetry-sdk", "packaging", "pathspec", "psutil", "python-json-logger", "python-on-whales", "requests", "rich", "rich-click", "ruff", "single-source", "tenacity", "uvicorn", "watchfiles"]
